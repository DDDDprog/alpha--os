# live-build/auto/config
#!/bin/sh
set -eu
# Prevent recursion by using 'noauto' here. 'lb config' (without noauto)
# will invoke this script automatically.
lb config noauto \
  --distribution bookworm \
  --architectures amd64 \
  --archive-areas "main contrib non-free non-free-firmware" \
  --mirror-bootstrap http://deb.debian.org/debian/ \
  --mirror-chroot http://deb.debian.org/debian/ \
  --mirror-chroot-security http://security.debian.org/debian-security \
  --mirror-binary http://deb.debian.org/debian/ \
  --debian-installer false \
  --binary-images iso-hybrid \
  "${@}"

# scripts/build.sh
#!/usr/bin/env bash
# Build Alpha OS ISO natively on Debian/Ubuntu
# Usage: sudo bash scripts/build.sh
set -euo pipefail

if [[ "${EUID}" -ne 0 ]]; then
  echo "Please run as root: sudo bash scripts/build.sh"
  exit 1
fi

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LB_DIR="${ROOT_DIR}/live-build"
OUT_DIR="${ROOT_DIR}/out"

mkdir -p "${OUT_DIR}"

need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing $1. Run: sudo bash scripts/prereqs-debian.sh"; exit 1; }; }
need lb
need debootstrap
need xorriso
need mksquashfs

chmod +x "${LB_DIR}/auto/config" || true
find "${LB_DIR}/config/hooks" -type f -name "*.chroot" -exec chmod +x {} \; || true

cd "${LB_DIR}"

echo "[*] Cleaning any previous build (purge)..."
lb clean --purge || true

echo "[*] Configuring live-build..."
lb config

echo "[*] Building ISO (this can take a while)..."
lb build

echo "[*] Handling output ISO(s)..."
shopt -s nullglob
ISOS=( ./*.iso )
if (( ${#ISOS[@]} == 0 )); then
  echo "No ISO produced. Check the build logs above for errors."
  exit 1
fi

for iso in "${ISOS[@]}"; do
  cp -v "$iso" "${OUT_DIR}/"
done

CANON="${OUT_DIR}/alpha-os-bookworm-amd64.iso"
cp -v "${ISOS[0]}" "$CANON"

echo "[âœ”] Done. ISO(s) available in: ${OUT_DIR}"
echo "    Canonical: $CANON"

# Dockerfile
FROM debian:bookworm

# Install necessary packages
RUN apt-get update && apt-get install -y live-build debootstrap xorriso squashfs-tools

# Set the working directory
WORKDIR /workspace

# Copy live-build configuration files
COPY live-build /workspace/live-build

# Copy build scripts
COPY scripts /workspace/scripts

# Set the default command
CMD bash -lc "lb clean --purge || true && lb config && lb build && ls -l *.iso"

# scripts/build-docker.sh
#!/usr/bin/env bash
# Build Alpha OS ISO using Docker
# Usage: sudo bash scripts/build-docker.sh
set -euo pipefail

if [[ "${EUID}" -ne 0 ]]; then
  echo "Please run as root: sudo bash scripts/build-docker.sh"
  exit 1
fi

IMAGE_NAME="alpha-os-builder"
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LB_DIR="${ROOT_DIR}/live-build"
OUT_DIR="${ROOT_DIR}/out"

# Build the Docker image if it doesn't exist
if ! docker image inspect "${IMAGE_NAME}" >/dev/null 2>&1; then
  echo "[*] Building Docker image..."
  docker build -t "${IMAGE_NAME}" "${ROOT_DIR}"
fi

# Run the Docker container
docker run --rm --privileged \
  -v "$(pwd)/live-build:/workspace/live-build" \
  -v "${OUT_DIR}:/workspace/out" \
  "${IMAGE_NAME}" bash -lc 'lb clean --purge || true && lb config && lb build && cp -v *.iso /workspace/out/'
